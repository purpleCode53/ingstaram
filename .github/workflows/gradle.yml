# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY}}
  JASYPT_PASSWORD_KEY: ${{secrets.JASYPT_PASSWORD_KEY}}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Login to Docker
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}


    - name: Docker build & push to docker repo
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_REPO }}:latest

    # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
    # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
    # 실행 시, docker-compose를 사용합니다.
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      with:
        host: ${{ secrets.HOST }}
        username: ec2-user
        key: ${{ secrets.KEY }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker rm -f rtb-container
          sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
          sudo docker run --init -e JWT_SECRET_KEY=${{env.JWT_SECRET_KEY}} -e JASYPT_PASSWORD_KEY=${{env.JASYPT_PASSWORD_KEY}} -d --name rtb-container -p 8080:8080 -v /var/loh/rtb/:/logs $${ secrets.DOCKER_REPO }}:latest
